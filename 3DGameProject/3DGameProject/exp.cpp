//=============================================================================
//
// 経験値処理 [exp.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "exp.h"

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CExp::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CExp::CExp()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CExp::~CExp()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CExp::TextureLoad(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
		"Data/Texture/bikkuri.png",					// ファイルの名前
		&m_pTexture);								// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CExp::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CExp * CExp::Create(D3DXVECTOR3 Pos, D3DXVECTOR3 Rot, D3DXVECTOR3 Size)
{
	CExp* pExp = NULL;
	pExp = new CExp;
	pExp->SetPos(Pos);
	pExp->SetRot(Rot);
	pExp->SetSize(Size);
	pExp->Init();
	return pExp;
}

//=============================================================================
// 全体生成処理関数
//=============================================================================
void CExp::CreateAll(D3DXVECTOR3 Pos, D3DXVECTOR3 Rot, D3DXVECTOR3 Size, int nExp)
{
	D3DXVECTOR3 RandPos;

	for (int nCount = 0; nCount < (nExp / 10); nCount++)
	{
		rand();
		Create(RandPos, Rot, Size);
	}
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CExp::Init(void)
{
	return E_NOTIMPL;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CExp::Uninit(void)
{
	CBillboard::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CExp::Update(void)
{
	CBillboard::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CExp::Draw(void)
{
	CBillboard::Draw();
}
