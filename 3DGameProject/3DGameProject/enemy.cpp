//=============================================================================
//
// 敵の管理処理処理 [enemy.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "model.h"
#include "enemy.h"
#include "exp.h"

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
CModel::MODELDATA CEnemy::m_ModelData = {};
D3DXMATERIAL * CEnemy::m_pMat = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CEnemy::CEnemy()
{
	m_pModel = NULL;
	m_DropExpSize = D3DXVECTOR3(0.0f,0.0f,0.0f);	//落とす経験値のサイズ
	m_nLife = 0;		//体力
	m_nAttack = 0;		//攻撃力
	m_nDropExp = 0;		//落とす経験値
}

//=============================================================================
// デストラクタ
//=============================================================================
CEnemy::~CEnemy()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CEnemy::Init(void)
{
	return E_NOTIMPL;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CEnemy::Uninit(void)
{
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CEnemy::Update(void)
{
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CEnemy::Draw(void)
{
}

//=============================================================================
// 落とす経験値のサイズ設定関数
//=============================================================================
void CEnemy::SetDropExpSize(D3DXVECTOR3 DropExpSize)
{
	//落とす経験値のサイズ設定
	m_DropExpSize = DropExpSize;
}

//=============================================================================
// 体力設定関数
//=============================================================================
void CEnemy::SetLife(int nLife)
{
	//体力の設定
	m_nLife = nLife;
}

//=============================================================================
// 攻撃力設定関数
//=============================================================================
void CEnemy::SetAttack(int nAttack)
{
	//攻撃力の設定
	m_nAttack = nAttack;
}

//=============================================================================
// 落とす経験値設定関数
//=============================================================================
void CEnemy::SetDropExp(int nDropExp)
{
	//落とす経験値量の代入
	m_nDropExp = nDropExp;
}

//=============================================================================
// 体力加算処理関数
//=============================================================================
void CEnemy::AddLife(int nValue)
{
	//体力の加算
	m_nLife += nValue;
	//回復エフェクトの生成
	//
}

//=============================================================================
// 体力減算処理関数
//=============================================================================
void CEnemy::SubLife(int nValue)
{
	//怯みアニメーションの再生
	//
	//体力の減算
	m_nLife -= nValue;
	//エフェクトの生成
	//
	//もしライフが0以下になったら
	if (m_nLife <= 0)
	{
		//死亡関数呼び出し
		Death();
	}
}

//=============================================================================
// 死亡処理関数
//=============================================================================
void CEnemy::Death(void)
{
	//死亡アニメーションの再生
	//
	//経験値ドロップ処理関数呼び出し
	DropExp();
	//終了処理関数呼び出し
	Uninit();
	return;
}

//=============================================================================
// 経験値ドロップ処理関数
//=============================================================================
void CEnemy::DropExp(void)
{
	//経験値の生成
	CExp::CreateAll(m_pModel->GetPos(), m_pModel->GetRot(), m_DropExpSize, m_nDropExp);
}
